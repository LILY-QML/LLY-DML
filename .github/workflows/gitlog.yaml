name: Version Control

on:
  push:
    branches:
      - dev
      - stable
      - main
  pull_request:
    branches:
      - dev
      - stable
      - main

jobs:
  versioning:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      DML_VERSION: ${{ vars.DML_VERSION }}
      PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref || github.ref }}
          persist-credentials: false

      - name: Get current branch
        id: branch_info
        run: echo "branch=${{ github.head_ref || github.ref }}" >> $GITHUB_OUTPUT

      - name: Read current version
        id: version_info
        run: |
          dml_version="${{ env.DML_VERSION }}"
          echo "version=$dml_version" >> $GITHUB_OUTPUT

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Read configuration
        id: config_info
        run: |
          config_file=".github/workflows/config.json"
          increase_dev=$(jq -r '.increase.dev' $config_file)
          increase_stable=$(jq -r '.increase.stable' $config_file)
          increase_main=$(jq -r '.increase.main' $config_file)
          echo "increase_dev=$increase_dev" >> $GITHUB_OUTPUT
          echo "increase_stable=$increase_stable" >> $GITHUB_OUTPUT
          echo "increase_main=$increase_main" >> $GITHUB_OUTPUT

      - name: Update version number
        id: version_update
        run: |
          branch="${{ steps.branch_info.outputs.branch }}"
          version="${{ steps.version_info.outputs.version }}"
          increase_dev="${{ steps.config_info.outputs.increase_dev }}"
          increase_stable="${{ steps.config_info.outputs.increase_stable }}"
          increase_main="${{ steps.config_info.outputs.increase_main }}"

          IFS='.' read -r major minor patch <<< "$version"

          if [[ "$branch" == "dev" && "$increase_dev" == "true" ]]; then
            patch=$((patch + 1))
          elif [[ "$branch" == "stable" && "$increase_stable" == "true" ]]; then
            minor=$((minor + 1))
            patch=0
          elif [[ "$branch" == "main" && "$increase_main" == "true" ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          else
            echo "No version change needed."
            exit 0
          fi

          new_version="$major.$minor.$patch"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Update DML_VERSION
        if: ${{ steps.version_update.outputs.new_version != '' }}
        run: |
          new_version="${{ steps.version_update.outputs.new_version }}"
          repo="${GITHUB_REPOSITORY}"
          echo "Updating DML_VERSION to $new_version"
          curl -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ env.PAT_TOKEN }}" \
            https://api.github.com/repos/$repo/actions/variables/DML_VERSION \
            -d "{\"name\":\"DML_VERSION\",\"value\":\"$new_version\"}"

      - name: Collect Python files
        id: python_files
        run: |
          files=$(find . -type f -name '*.py')
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$files" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update Python files
        if: ${{ steps.version_update.outputs.new_version != '' }}
        shell: bash {0}
        run: |
          set -x
          new_version="${{ steps.version_update.outputs.new_version }}"
          files="${{ steps.python_files.outputs.files }}"

          echo "Processing files:"
          echo "$files"

          readarray -t file_array <<< "$files"

          for file in "${file_array[@]}"; do
            echo "Processing file: $file"
            if [ ! -f "$file" ]; then
              echo "File not found: $file"
              continue
            fi
            ls -l "$file"
            echo "Running grep on $file"
            if grep -a -q '# +++++++++++++++++++++++++++++++++++++++++++++++++++++++' "$file"; then
              echo "Header found, updating version."
              sed -i "s/^# Version: .*/# Version: $new_version LLY-DML/" "$file" || {
                echo "Error updating version in $file"
                exit 1
              }
            else
              echo "Header not found, adding header."
              contributors_line=$(grep -m1 '^# Contributors:' "$file" || echo '# Contributors:')
              header="# +++++++++++++++++++++++++++++++++++++++++++++++++++++++\n# Project: LILY-QML\n# Version: $new_version LLY-DML\n# Author: Leon Kaiser\n# Contact: info@lilyqml.de\n# Website: www.lilyqml.de\n$contributors_line\n# +++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
              echo -e "$header" > "$file.new" || {
                echo "Error writing new file $file.new"
                exit 1
              }
              cat "$file" >> "$file.new" || {
                echo "Error appending content of $file to $file.new"
                exit 1
              }
              mv "$file.new" "$file" || {
                echo "Error replacing original file $file"
                exit 1
              }
            fi
          done

      - name: Commit and push changes
        if: ${{ steps.version_update.outputs.new_version != '' }}
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Increased version to ${{ steps.version_update.outputs.new_version }}"
          git push https://${PAT_TOKEN}@github.com/${{ github.repository }} HEAD:${{ github.head_ref || github.ref }}
