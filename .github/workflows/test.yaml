name: Quantum CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job zum Testen des Codes
  test:
    runs-on: ubuntu-latest

    steps:
      # Code aus dem Repository auschecken
      - name: Check out repository code
        uses: actions/checkout@v2

      # Python-Version einrichten
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      # Abhängigkeiten installieren
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      # Unit-Tests ausführen
      - name: Run Unit Tests
        run: |
          python -m unittest discover -s . -p 'test*.py'

      # Code-Qualität überprüfen
      - name: Code Quality Check
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  # Job zur Berichterstellung
  report:
    runs-on: ubuntu-latest
    needs: test

    steps:
      # Code aus dem Repository auschecken
      - name: Check out repository code
        uses: actions/checkout@v2

      # Python-Version einrichten
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      # Abhängigkeiten installieren
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Bericht generieren
      - name: Generate Quantum Circuit Report
        run: |
          python main.py

      # Bericht als Artefakt hochladen
      - name: Upload Report
        uses: actions/upload-artifact@v2
        with:
          name: Quantum Circuit Report
          path: var/QuantumCircuitReport.pdf

  # Job zur Dokumentation
  docs:
    runs-on: ubuntu-latest
    needs: test

    steps:
      # Code aus dem Repository auschecken
      - name: Check out repository code
        uses: actions/checkout@v2

      # Python-Version einrichten
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      # Sphinx installieren
      - name: Install Sphinx
        run: |
          python -m pip install sphinx
          pip install sphinx_rtd_theme

      # Dokumentation bauen
      - name: Build Documentation
        run: |
          cd docs
          make html

      # Dokumentation auf GitHub Pages bereitstellen
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html

  # Job zur Veröffentlichung
  release:
    runs-on: ubuntu-latest
    needs: [test, docs]
    if: github.ref == 'refs/heads/main'

    steps:
      # Code aus dem Repository auschecken
      - name: Check out repository code
        uses: actions/checkout@v2

      # Python-Version einrichten
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      # Veröffentlichung auf PyPI
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

      # GitHub-Release erstellen
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## Changes
            - Automated release by GitHub Actions
          draft: false
          prerelease: false
